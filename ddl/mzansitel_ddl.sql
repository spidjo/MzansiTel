/*
====================================================================================================
Database Schema: MzansiTel Telecommunications
Purpose: Complete data model for MzansiTel's customer, billing, and call tracking systems

Description:
This script creates the core operational tables, staging tables, audit/history tables, 
and supporting objects for MzansiTel's telecom operations. The schema includes:

1. Core operational tables:
   - Subscriber information
   - Tariff plans and pricing
   - Call Detail Records (CDR)
   - Billing and payments
   - Customer notifications

2. Staging tables for ETL processes
3. Audit/history tables for change tracking
4. Performance optimization indexes
5. Logging tables for ETL and error tracking

Key Features:
- Identity columns for surrogate keys
- Appropriate constraints (PK, FK, CHECK)
- Partitioning for large tables (CDR data)
- Comprehensive audit tracking
- Data validation through constraints
====================================================================================================
*/

-- ====================================================================
-- SECTION 1: CORE OPERATIONAL TABLES
-- These tables store the live business data for the telecom operations
-- ====================================================================

-- SUBSCRIBER: Stores customer information
CREATE TABLE subscriber (
    subscriber_id         NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    msisdn                VARCHAR2(15) NOT NULL UNIQUE,  -- Mobile Station International Subscriber Directory Number
    first_name            VARCHAR2(100) NOT NULL,        -- Customer's first name
    last_name             VARCHAR2(100) NOT NULL,        -- Customer's last name
    date_of_birth         DATE,                         -- Customer's date of birth
    email_address         VARCHAR2(100) 
        CHECK (email_address LIKE '%@%.%'),            -- Basic email format validation
    registration_date     DATE DEFAULT SYSDATE,         -- Date customer registered
    status                VARCHAR2(20) DEFAULT 'ACTIVE' -- Account status (ACTIVE/INACTIVE/etc)
        CHECK (status IN ('ACTIVE', 'SUSPENDED', 'TERMINATED', 'INACTIVE')),
    created_at            TIMESTAMP DEFAULT SYSTIMESTAMP, -- Record creation timestamp
    created_by            VARCHAR2(50),                 -- User/system that created record
    updated_at            TIMESTAMP,                    -- Last update timestamp
    updated_by            VARCHAR2(50)                  -- User/system that last updated
)  ;

COMMENT ON TABLE subscriber IS 'Master table of all mobile subscribers with their personal details';
COMMENT ON COLUMN subscriber.msisdn IS 'Unique mobile number in international format (e.g., 27123456789)';

-- TARIFF_PLAN: Stores available service plans and pricing
CREATE TABLE tariff_plan (
    plan_id               NUMBER PRIMARY KEY,           -- Business key for plans
    plan_name             VARCHAR2(50) NOT NULL UNIQUE, -- Human-readable plan name
    description           VARCHAR2(255),                -- Detailed plan description
    monthly_fee           NUMBER(10,2) NOT NULL         -- Base monthly charge
        CHECK (monthly_fee >= 0),
    call_rate_per_minute  NUMBER(10,2)                  -- Cost per minute for calls
        CHECK (call_rate_per_minute >= 0),
    sms_rate_per_message  NUMBER(10,2)                  -- Cost per SMS
        CHECK (sms_rate_per_message >= 0),
    data_rate_per_mb      NUMBER(10,2)                  -- Cost per MB of data
        CHECK (data_rate_per_mb >= 0),
    data_limit_mb         NUMBER(10)                    -- Included monthly data (MB)
        CHECK (data_limit_mb >= 0),
    voice_limit_minutes   NUMBER(10)                    -- Included monthly voice minutes
        CHECK (voice_limit_minutes >= 0),
    sms_limit             NUMBER(10)                    -- Included monthly SMS
        CHECK (sms_limit >= 0),
    valid_from            DATE NOT NULL,                -- Plan effective start date
    valid_to              DATE,                         -- Plan end date (NULL for ongoing)
        CHECK (valid_to IS NULL OR valid_to >= valid_from),
    created_at            TIMESTAMP DEFAULT SYSTIMESTAMP,
    created_by            VARCHAR2(50),
    updated_at            TIMESTAMP,
    updated_by            VARCHAR2(50)
)  ;

COMMENT ON TABLE tariff_plan IS 'Available service plans with pricing and limits';
COMMENT ON COLUMN tariff_plan.plan_id IS 'Business identifier for tariff plans';

-- SUBSCRIBER_PLAN: Tracks which plans subscribers are enrolled in
CREATE TABLE subscriber_plan (
    subscriber_plan_id    NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    subscriber_msisdn     VARCHAR2(15) NOT NULL,        -- Reference to subscriber
    plan_id               NUMBER NOT NULL,               -- Reference to tariff plan
    plan_start_date       DATE NOT NULL,                 -- When plan became active
    plan_end_date         DATE,                          -- When plan was/will be terminated
        CHECK (plan_end_date IS NULL OR plan_end_date >= plan_start_date),
    created_at            TIMESTAMP DEFAULT SYSTIMESTAMP,
    created_by            VARCHAR2(50),
    updated_at            TIMESTAMP,
    updated_by            VARCHAR2(50),
    
    CONSTRAINT fk_subscriber_plan FOREIGN KEY (subscriber_msisdn)
        REFERENCES subscriber(msisdn)
        ON DELETE CASCADE,
    CONSTRAINT fk_tariff_plan FOREIGN KEY (plan_id)
        REFERENCES tariff_plan(plan_id)
        ON DELETE CASCADE
)  ;

COMMENT ON TABLE subscriber_plan IS 'Mapping of subscribers to their active/inactive tariff plans';

-- CALL_DETAIL_RECORD: Stores individual call/SMS/data usage records
CREATE TABLE call_detail_record (
    cdr_id                NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    subscriber_msisdn     VARCHAR2(15) NOT NULL,        -- Originating subscriber
    call_type             VARCHAR2(20)                  -- Type of communication
        CHECK (call_type IN ('VOICE', 'SMS', 'DATA')),
    call_start_time       TIMESTAMP NOT NULL,           -- When communication started
    call_end_time         TIMESTAMP,                    -- When communication ended
        CHECK (call_end_time IS NULL OR call_end_time >= call_start_time),
    call_duration_sec     NUMBER(5),                    -- Duration in seconds
        CHECK (call_duration_sec >= 0),
    destination_number    VARCHAR2(20),                 -- Called/SMSed number
    call_cost             NUMBER(10,2),                 -- Calculated cost
        CHECK (call_cost >= 0),
    call_direction        VARCHAR2(10)                  -- Inbound/Outbound
        CHECK (call_direction IN ('INBOUND', 'OUTBOUND')),
    created_at            TIMESTAMP DEFAULT SYSTIMESTAMP,
    source_file_name      VARCHAR2(255),                -- Original source file
    
    CONSTRAINT fk_cdr_subscriber FOREIGN KEY (subscriber_msisdn)
        REFERENCES subscriber(msisdn)
        ON DELETE CASCADE
)
PARTITION BY RANGE (call_start_time)                   -- Time-based partitioning
INTERVAL (INTERVAL '1' MONTH)                          -- Auto-create monthly partitions
(
    PARTITION cdr_p_jan25 VALUES LESS THAN (TO_DATE('2025-02-01', 'YYYY-MM-DD'))
);

COMMENT ON TABLE call_detail_record IS 'Detailed records of all call/SMS/data usage events';
COMMENT ON COLUMN call_detail_record.call_type IS 'Type of communication: VOICE, SMS, or DATA';

-- INVOICE: Customer billing statements
CREATE TABLE invoice (
    invoice_id            NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    subscriber_id         NUMBER NOT NULL,              -- Reference to subscriber
    billing_period_start  DATE NOT NULL,                -- Billing cycle start
    billing_period_end    DATE NOT NULL,                -- Billing cycle end
        CHECK (billing_period_end > billing_period_start),
    total_amount_due      NUMBER(12,2) NOT NULL         -- Total charges
        CHECK (total_amount_due >= 0),
    generated_date        DATE DEFAULT SYSDATE,         -- When invoice was created
    due_date              DATE NOT NULL,                -- Payment deadline
    status                VARCHAR2(20)                  -- Invoice payment status
        CHECK (status IN ('PAID', 'PARTIALLY_PAID', 'UNPAID', 'OVERDUE')),
    created_at            TIMESTAMP DEFAULT SYSTIMESTAMP,
    created_by            VARCHAR2(50),
    updated_at            TIMESTAMP,
    updated_by            VARCHAR2(50),

    CONSTRAINT fk_invoice_subscriber FOREIGN KEY (subscriber_id)
        REFERENCES subscriber(subscriber_id)
        ON DELETE CASCADE
);

COMMENT ON TABLE invoice IS 'Customer billing statements for service usage';

-- PAYMENT: Records of customer payments
CREATE TABLE payment (
    payment_id            NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    invoice_id            NUMBER NOT NULL,              -- Reference to invoice
    payment_date          DATE DEFAULT SYSDATE,          -- When payment was received
    payment_amount        NUMBER(12,2) NOT NULL          -- Amount paid
        CHECK (payment_amount > 0),
    payment_method        VARCHAR2(20),                 -- Payment type (CC, Bank Transfer, etc)
    reference_number      VARCHAR2(50),                 -- Payment reference/confirmation
    created_at            TIMESTAMP DEFAULT SYSTIMESTAMP,
    created_by            VARCHAR2(50),

    CONSTRAINT fk_payment_invoice FOREIGN KEY (invoice_id)
        REFERENCES invoice(invoice_id)
        ON DELETE CASCADE
)  ;

COMMENT ON TABLE payment IS 'Records of customer payments against invoices';

-- NOTIFICATION: Customer communication history
CREATE TABLE notification (
    notification_id       NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    subscriber_id         NUMBER NOT NULL,              -- Recipient subscriber
    notification_type     VARCHAR2(50)                 -- Purpose of notification
        CHECK (notification_type IN ('Billing alert', 'Payment alert', 'Fraud alert', 'Payment reminder')),
    sent_date             DATE DEFAULT SYSDATE,         -- When notification was sent
    status                VARCHAR2(20) DEFAULT 'PENDING' -- Delivery status
        CHECK (status IN ('READ', 'SENT', 'FAILED')),
    channel               VARCHAR2(20)                 -- Delivery channel
        CHECK (channel IN ('SMS', 'EMAIL', 'APP')),  
    message               VARCHAR2(4000),              -- Message content

    CONSTRAINT fk_notification_subscriber FOREIGN KEY (subscriber_id)
        REFERENCES subscriber(subscriber_id)
        ON DELETE CASCADE
)  ;

COMMENT ON TABLE notification IS 'Records of all customer communications sent by the system';

-- ====================================================================
-- SECTION 2: STAGING TABLES
-- Tables for temporary data during ETL processes before loading to core
-- ====================================================================

-- STAGING_SUBSCRIBER: Temporary subscriber data during loads
CREATE TABLE staging_subscriber (
    msisdn                VARCHAR2(15) UNIQUE NOT NULL,
    first_name            VARCHAR2(100) NOT NULL,
    last_name             VARCHAR2(100) NOT NULL,
    date_of_birth         DATE,
    national_id           VARCHAR2(20),                -- National ID for verification
    email_address         VARCHAR2(100),
    registration_date     DATE DEFAULT SYSDATE,
    status                VARCHAR2(20) DEFAULT 'ACTIVE',
    source_file_name      VARCHAR2(255),               -- Original source filename
    load_timestamp        TIMESTAMP DEFAULT SYSTIMESTAMP -- When record was loaded
)  ;

COMMENT ON TABLE staging_subscriber IS 'Staging area for subscriber data during ETL processes';

-- STAGING_CDR: Temporary call records during loads
CREATE TABLE staging_cdr (
    subscriber_msisdn     VARCHAR2(15) NOT NULL,
    call_type             VARCHAR2(20) 
        CHECK (call_type IN ('VOICE', 'SMS', 'DATA')),
    call_start_time       TIMESTAMP NOT NULL,
    call_end_time         TIMESTAMP,
    call_duration_sec     NUMBER(5),
    destination_number    VARCHAR2(20),
    call_cost             NUMBER(10,2),
    call_direction        VARCHAR2(10),
    source_file_name      VARCHAR2(255),
    load_timestamp        TIMESTAMP DEFAULT SYSTIMESTAMP,

    CONSTRAINT fk_stg_cdr FOREIGN KEY (subscriber_msisdn)
        REFERENCES staging_subscriber(msisdn)
        ON DELETE CASCADE
)
PARTITION BY RANGE (call_start_time)
INTERVAL (INTERVAL '1' MONTH)
(
    PARTITION cdr_p_jan25 VALUES LESS THAN (TO_DATE('2025-02-01', 'YYYY-MM-DD'))
)  ;

COMMENT ON TABLE staging_cdr IS 'Staging area for call detail records during ETL processes';

-- STAGING_TARIFF_PLAN: Temporary tariff plan data during loads
CREATE TABLE staging_tariff_plan (
    plan_id               NUMBER PRIMARY KEY,
    plan_name             VARCHAR2(100) NOT NULL,
    description           VARCHAR2(255),
    monthly_fee           NUMBER(10,2) NOT NULL,
    call_rate_per_minute  NUMBER(10,2),
    sms_rate_per_message  NUMBER(10,2),
    data_rate_per_mb      NUMBER(10,2),
    data_limit_mb         NUMBER(10,2),
    voice_limit_minutes   NUMBER(10,2),
    sms_limit             NUMBER(10,2),
    valid_from            DATE NOT NULL,
    valid_to              DATE,
    source_file_name      VARCHAR2(255),
    load_timestamp        TIMESTAMP
)  ;

COMMENT ON TABLE staging_tariff_plan IS 'Staging area for tariff plan data during ETL processes';

-- STAGING_SUBSCRIBER_PLAN: Temporary subscriber-plan mappings during loads
CREATE TABLE staging_subscriber_plan (
    subscriber_msisdn     VARCHAR2(15) NOT NULL,
    plan_id               NUMBER NOT NULL,
    plan_start_date       DATE NOT NULL,
    plan_end_date         DATE,
    source_file_name      VARCHAR2(255),
    load_timestamp        TIMESTAMP DEFAULT SYSTIMESTAMP,

    CONSTRAINT fk_stg_subscriber_plan FOREIGN KEY (subscriber_msisdn)
        REFERENCES staging_subscriber(msisdn)
        ON DELETE CASCADE,
    CONSTRAINT fk_stg_tariff_plan FOREIGN KEY (plan_id)
        REFERENCES staging_tariff_plan(plan_id)
        ON DELETE CASCADE
)  ;

COMMENT ON TABLE staging_subscriber_plan IS 'Staging area for subscriber-plan mappings during ETL processes';

-- ====================================================================
-- SECTION 3: LOGGING AND AUDIT TABLES
-- Tables for tracking system operations and data changes
-- ====================================================================

-- LOG_ERRORS: System error tracking
CREATE TABLE log_errors (
    log_id          NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    process         VARCHAR2(200),                     -- Which process failed
    affected_table  VARCHAR2(50) NOT NULL,             -- Which table was involved
    error_time      TIMESTAMP DEFAULT SYSTIMESTAMP,    -- When error occurred
    error_message   VARCHAR2(4000),                    -- Full error details
    raw_record      VARCHAR2(1000) DEFAULT NULL,       -- Problem record data
    source_file     VARCHAR2(255) DEFAULT NULL         -- Source file if applicable
)  ;

COMMENT ON TABLE log_errors IS 'System-wide error logging for all data processing operations';

-- IMPORT_LOG: ETL process tracking
CREATE TABLE import_log (
    log_id          NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    source_file     VARCHAR2(255) NOT NULL,            -- File being imported
    import_date     TIMESTAMP DEFAULT SYSTIMESTAMP,    -- When import occurred
    record_count    NUMBER,                            -- Records processed
    error_count     NUMBER DEFAULT 0,                  -- Errors encountered
    status          VARCHAR2(100),                     -- Final status
    error_message   VARCHAR2(4000)                     -- Summary of errors
)  ;

COMMENT ON TABLE import_log IS 'Tracking of all data import operations with results';

-- FILE_ARCHIVE_LOG: File movement tracking
CREATE TABLE file_archive_log (
    file_name         VARCHAR2(255),                   -- Name of processed file
    source_dir        VARCHAR2(100),                   -- Original location
    target_dir        VARCHAR2(100),                   -- Archive location
    archive_timestamp TIMESTAMP,                       -- When moved
    error_message     VARCHAR2(4000)                   -- Any movement errors
)  ;

COMMENT ON TABLE file_archive_log IS 'Tracking of file movements during ETL processes';

-- ====================================================================
-- SECTION 4: HISTORY TABLES
-- Tables for tracking changes to operational data over time
-- ====================================================================

-- SUBSCRIBER_HIST: Subscriber change tracking
CREATE TABLE subscriber_hist (
    audit_id             NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    subscriber_id        NUMBER,                       -- Reference to subscriber
    msisdn               VARCHAR2(15),                 -- Subscriber's number
    first_name           VARCHAR2(100),                -- Previous first name
    last_name            VARCHAR2(100),                -- Previous last name
    date_of_birth        DATE,                         -- Previous DOB
    national_id          VARCHAR2(20),                 -- Previous national ID
    email_address        VARCHAR2(100),                -- Previous email
    registration_date    DATE,                         -- Original registration
    status               VARCHAR2(20),                 -- Previous status
    change_type          VARCHAR2(10)                  -- Type of change
        CHECK (change_type IN ('INSERT', 'UPDATE', 'DELETE')),
    change_timestamp     TIMESTAMP DEFAULT SYSTIMESTAMP,-- When change occurred
    changed_by           VARCHAR2(50)                  -- Who made the change
)  ;

COMMENT ON TABLE subscriber_hist IS 'Historical tracking of all subscriber record changes';

-- CALL_DETAIL_RECORD_HIST: CDR change tracking
CREATE TABLE call_detail_record_hist (
    audit_id             NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    cdr_id               NUMBER,                       -- Reference to CDR
    subscriber_msisdn    VARCHAR2(15),                 -- Subscriber number
    call_type            VARCHAR2(20),                 -- Call/SMS/Data
    call_start_time      DATE,                         -- Original start time
    call_end_time        DATE,                         -- Original end time
    call_duration_sec    NUMBER(10),                   -- Original duration
    destination_number   VARCHAR2(20),                 -- Called number
    call_cost            NUMBER(10,2),                 -- Original cost
    call_direction       VARCHAR2(10),                 -- Inbound/Outbound
    change_type          VARCHAR2(10),                 -- Type of change
    change_timestamp     TIMESTAMP DEFAULT SYSTIMESTAMP,
    changed_by           VARCHAR2(50)
)  ;

COMMENT ON TABLE call_detail_record_hist IS 'Historical tracking of CDR changes';

-- INVOICE_HIST: Invoice change tracking
CREATE TABLE invoice_hist (
    audit_id             NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    invoice_id           NUMBER,                       -- Reference to invoice
    subscriber_id        NUMBER,                       -- Subscriber ID
    billing_period_start DATE,                         -- Original period start
    billing_period_end   DATE,                         -- Original period end
    total_amount_due     NUMBER(12,2),                 -- Original amount
    generated_date       DATE,                         -- When generated
    due_date             DATE,                         -- Original due date
    status               VARCHAR2(25),                 -- Previous status
    change_type          VARCHAR2(10),                 -- Type of change
    change_timestamp     TIMESTAMP DEFAULT SYSTIMESTAMP,
    changed_by           VARCHAR2(50)
)  ;

COMMENT ON TABLE invoice_hist IS 'Historical tracking of invoice changes';

-- PAYMENT_HIST: Payment change tracking
CREATE TABLE payment_hist (
    audit_id             NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    payment_id           NUMBER,                       -- Reference to payment
    invoice_id           NUMBER,                       -- Related invoice
    payment_date         DATE,                         -- Original payment date
    payment_amount       NUMBER(12,2),                 -- Original amount
    payment_method       VARCHAR2(20),                 -- Payment method
    reference_number     VARCHAR2(50),                 -- Payment reference
    change_type          VARCHAR2(10),                 -- Type of change
    change_timestamp     TIMESTAMP DEFAULT SYSTIMESTAMP,
    changed_by           VARCHAR2(50)
)  ;

COMMENT ON TABLE payment_hist IS 'Historical tracking of payment record changes';

-- SUBSCRIBER_PLAN_HIST: Subscriber plan change tracking
CREATE TABLE subscriber_plan_hist (
    audit_id             NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    subscriber_plan_id   NUMBER,                       -- Reference to mapping
    subscriber_msisdn    VARCHAR(15),                  -- Subscriber number
    plan_id              NUMBER,                       -- Plan ID
    plan_start_date      DATE,                         -- Original start date
    plan_end_date        DATE,                         -- Original end date
    change_type          VARCHAR2(10),                 -- Type of change
    change_timestamp     TIMESTAMP DEFAULT SYSTIMESTAMP,
    changed_by           VARCHAR2(50)
)  ;

COMMENT ON TABLE subscriber_plan_hist IS 'Historical tracking of subscriber-plan mapping changes';

-- ====================================================================
-- SECTION 5: PERFORMANCE INDEXES
-- Indexes to optimize query performance
-- ====================================================================

-- CDR Indexes
CREATE INDEX idx_cdr_subscriber_msisdn ON call_detail_record(subscriber_msisdn);
CREATE INDEX idx_cdr_subs_msisdn_ct_cst_cet ON call_detail_record(
    subscriber_msisdn, call_type, call_start_time, call_end_time);

-- Invoice Indexes
CREATE INDEX idx_invoice_status ON invoice(status);

-- Payment Indexes
CREATE INDEX idx_payment_invoice ON payment(invoice_id);

-- Subscriber Plan Indexes
CREATE INDEX idx_subscriber_plan_active ON subscriber_plan(
    subscriber_msisdn, plan_end_date);

-- Staging CDR Indexes
CREATE INDEX idx_stg_cdr_subscriber_msisdn ON staging_cdr(subscriber_msisdn);
CREATE INDEX idx_stg_cdr_subs_msisdn_ct_cst_cet ON staging_cdr(
    subscriber_msisdn, call_type, call_start_time, call_end_time);

-- ====================================================================
-- END OF SCHEMA CREATION SCRIPT
-- ====================================================================